import Loc

declare {ocaml} rename module = Lem_debug

type domain =
  | DB_clexer
  | DB_cparser
  | DB_desugaring
  | DB_ail_typing
  | DB_elaboration
  | DB_core_typing
  | DB_core_dynamics
  | DB_driver
  | DB_concurrency
  | DB_driver_step
  | DB_memory

declare ocaml target_rep type domain = `Cerb_debug.domain`
declare ocaml target_rep function DB_clexer = `Cerb_debug.DB_clexer`
declare ocaml target_rep function DB_cparser = `Cerb_debug.DB_cparser`
declare ocaml target_rep function DB_desugaring = `Cerb_debug.DB_desugaring`
declare ocaml target_rep function DB_ail_typing = `Cerb_debug.DB_ail_typing`
declare ocaml target_rep function DB_elaboration = `Cerb_debug.DB_elaboration`
declare ocaml target_rep function DB_core_typing = `Cerb_debug.DB_core_typing`
declare ocaml target_rep function DB_core_dynamics = `Cerb_debug.DB_core_dynamics`
declare ocaml target_rep function DB_driver = `Cerb_debug.DB_driver`
declare ocaml target_rep function DB_concurrency = `Cerb_debug.DB_concurrency`
declare ocaml target_rep function DB_driver_step = `Cerb_debug.DB_driver_step`
declare ocaml target_rep function DB_memory = `Cerb_debug.DB_memory`

val get_level: unit -> nat
declare ocaml target_rep function get_level   = `Cerb_debug.get_debug_level`
declare hol   target_rep function get_level u = 0 (* TODO: HOL hack *)


val output_string: string -> unit
declare ocaml target_rep function output_string = `Cerb_debug.output_string2`
declare hol   target_rep function output_string = `util$output_string`

val print_debug: nat -> list domain -> (unit -> string) -> unit
declare ocaml target_rep function print_debug = `Cerb_debug.print_debug`
declare hol   target_rep function print_debug = `util$print_debug`

val print_debug_located: nat -> list domain -> Loc.t -> (unit -> string) -> unit
declare ocaml target_rep function print_debug_located = `Cerb_debug.print_debug_located`
declare hol   target_rep function print_debug_located =
                                  `util$print_debug_located`

val print_unsupported: string -> unit
declare ocaml target_rep function print_unsupported = `Cerb_debug.print_unsupported`
declare hol   target_rep function print_unsupported = `util$output_string`


val warn: list domain -> (unit -> string) -> unit
declare ocaml target_rep function warn = `Cerb_debug.warn`
declare hol   target_rep function warn = `util$output_string`


(*
open import Pervasives 
import Boot

let _DEBUG level f k =
  if level <= Boot.debug_level then
    f k
  else
    k


(* Used in [core_run.lem], print the collected continuation in a Core program *)
let print_cont_map cont_map k =
  Boot.print_debug "TODO[newLem]" k
(*
  (  "COLLECTED CONTINUATIONS:\n" ^
  (List.fold_left (fun acc (f, ks) ->
    "In function `" ^ Boot.pp_core_expr (Core.Esym f) ^ "': [" ^
      (List.fold_left (fun acc k -> Boot.pp_core_expr (Core.Esym k) ^ ", " ^ acc) "" (List.map fst $ Pmap.bindings ks)) ^ "]\n" ^ acc
   ) "" $ Pmap.bindings cont_map))
  k
*)

*)


(* val debug: forall 'a. string -> 'a *)

