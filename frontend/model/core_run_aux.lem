open import Pervasives Utils Show Core
import Global Dlist Pp State_exception_undefined Map_extra

open import Errors Core Annot
import Cmm_csem Mem_common Core_aux


(* DEBUG *)
(* These inform in the thread what Core global or (stack of) procedure(s) is
   being executed *)
type exec_location =
  | ELoc_globals
  | ELoc_normal of list (Symbol.sym * Loc.t)


(* C11 concurrency partial version of the pre-execution relations. These are
   incrementaly added as annotations to the Core program as it is evaluated *)
type core_run_annotation = <|
  sb_before:  set (Mem_common.thread_id * Cmm_csem.aid);
  dd_before:  set Cmm_csem.aid;
  asw_before: set Cmm_csem.aid;
|>


 (* runtime stuff *)


type context (* core_run_annotation unit Symbol.sym *) =
  | CTX
  | Cunseq of list Annot.annot * list (Core.expr core_run_annotation) * context * list (Core.expr core_run_annotation)
  | Cwseq of list Annot.annot * Core.pattern * context * Core.expr core_run_annotation
  | Csseq of list Annot.annot * Core.pattern * context * Core.expr core_run_annotation
  | Cannot of list Annot.annot * list Core.dyn_annotation * context
  | Cbound of list Annot.annot * context

let rec stringFromContext ctx =
  match ctx with
    | CTX ->
        "CTX"
    | Cunseq _ _ ctx' _ ->
        "Cunseq[" ^ stringFromContext ctx' ^ "]"
    | Cwseq _ _ ctx' _ ->
        "Cwseq[" ^ stringFromContext ctx' ^ "]"
    | Csseq _ _ ctx' _ ->
        "Csseq[" ^ stringFromContext ctx' ^ "]"
    | Cannot _ _ ctx' ->
        "Cannot[" ^ stringFromContext ctx' ^ "]"
    | Cbound _ ctx' ->
        "Cbound[" ^ stringFromContext ctx' ^ "]"
  end
instance (Show context)
  let show ctx = stringFromContext ctx
end


type continuation_element 'a =
  | Kunseq of list annot * list (Core.expr 'a) * list (Core.expr 'a)
  | Kwseq  of list annot * Core.pattern * Core.expr 'a
  | Ksseq  of list annot * Core.pattern * Core.expr 'a
 (*  | Ktry   list (string * expr 'a) *)

type continuation 'a = list (continuation_element 'a)
(* type labeled_continuation 'a = list (Symbol.sym * ctype) * expr 'a *)
type labeled_continuations 'a = map Symbol.sym (list (Symbol.sym * core_base_type) * expr 'a)


type stack 'a =
  | Stack_empty
    (* the symbol is that of the procedure being executed *)
  | Stack_cons of maybe Symbol.sym * (*labeled_continuations 'a * *) continuation 'a * stack 'a
    (* TODO: this is for Core_reduction, the previous one is for Core_run *)

  | Stack_cons2 of maybe Symbol.sym (* name of the current Core procedure, if any *)
                 * context          (*  *)
                 * stack 'a
 


let subst_wait_continuation_element tid v = function
  | Kunseq annots es1 es2 ->
      Kunseq annots (List.map (Core_aux.subst_wait tid v) es1) (List.map (Core_aux.subst_wait tid v) es2)
  | Kwseq annots syms_opt e2 ->
      Kwseq annots syms_opt (Core_aux.subst_wait tid v e2)
  | Ksseq annots syms_opt e2 ->
      Ksseq annots syms_opt (Core_aux.subst_wait tid v e2)
(*
  | Ktry str_es ->
      Ktry (List.map (fun (str, e) -> (str, subst_wait tid v e)) str_es)
*)
end

let subst_wait_continuation tid v cont =
  List.map (subst_wait_continuation_element tid v) cont

let rec subst_wait_stack tid v = function
  | Stack_empty ->
      Stack_empty
  | Stack_cons sym_opt cont sk ->
      Stack_cons sym_opt
        (subst_wait_continuation tid v cont) (subst_wait_stack tid v sk)
  | Stack_cons2 _ _ _ ->
      error "subst_wait_stack ==> Stack_cons2"
end


val apply_continuation: forall 'a. continuation 'a -> expr 'a -> expr 'a
let apply_continuation cont expr =
  let f _cont (Expr annot _ as expr) =
    match _cont with
      | Kwseq annots pat e2 ->
          Expr annots (Ewseq pat expr e2)
      | Ksseq annots pat e2 ->
          Expr annots (Esseq pat expr e2)
      | Kunseq annots es1 es2 ->
          Expr annots (Eunseq $ es1 ++ (expr :: es2))
(*
      | Ktry str_es ->
          Etry expr str_es
*)
    end in
  foldl (fun acc x -> f x acc) expr cont


(* Functions on continuation and stacks *)
val empty_stack: forall 'a. stack 'a
let empty_stack =
  Stack_empty

val is_empty_stack: forall 'a. stack 'a -> bool
let is_empty_stack = function
  | Stack_empty ->
      true
  | _ ->
      false
end



val push_empty_continuation: forall 'a. maybe Symbol.sym -> stack 'a -> stack 'a
let push_empty_continuation sym_opt sk =
(*  Stack_cons sym_opt [] sk *)
  Stack_cons2 sym_opt CTX sk

val reset_continuation: forall 'a. stack 'a -> stack 'a
let reset_continuation = function
  | Stack_empty ->
      (* TODO: are should this fail, just to catch ill-uses? *)
      Stack_empty
  | Stack_cons sym_opt cont sk ->
      Stack_cons sym_opt [] sk
  | Stack_cons2 _ _ _ ->
      error "reset_continuation ==> Stack_cons2"
end

val pop_stack: forall 'a. stack 'a -> Exception.exceptM (continuation 'a * stack 'a) core_run_cause
let pop_stack = function
  | Stack_empty ->
      Exception.fail (Found_empty_stack "pop_stack")
  | Stack_cons _ cont sk ->
      Exception.return (cont, sk)
  | Stack_cons2 _ _ _ ->
      error "pop_stack ==> Stack_cons2"  
end

val pop_continuation_element: forall 'a. stack 'a -> Exception.exceptM (continuation_element 'a * stack 'a) core_run_cause
let pop_continuation_element = function
  | Stack_empty ->
      Exception.fail (Found_empty_stack "pop_continuation_element")
  | Stack_cons _ [] _ ->
      Exception.fail Reached_end_of_proc
  | Stack_cons sym_opt (cont_elem :: cont) sk ->
      Exception.return (cont_elem, Stack_cons sym_opt cont sk)
  | Stack_cons2 _ _ _ ->
      error "pop_continuation_element ==> Stack_cons2"
end


val push_continuation_element: forall 'a. continuation_element 'a -> stack 'a -> Exception.exceptM (stack 'a) core_run_cause
let push_continuation_element cont_elem = function
  | Stack_empty ->
      Exception.fail (Found_empty_stack "push_continuation_element")
  | Stack_cons sym_opt cont sk ->
      Exception.return (Stack_cons sym_opt (cont_elem :: cont) sk)
  | Stack_cons2 _ _ _ ->
      error "push_continuation_element ==> Stack_cons2"
end



val append_to_current_continuation: forall 'a. continuation_element 'a -> stack 'a -> Exception.exceptM (stack 'a) core_run_cause
let append_to_current_continuation cont_elem = function
  | Stack_empty ->
      (* A procedure need to currently be running to append *)
      Exception.fail (Found_empty_stack "append_to_current_continuation")
  | Stack_cons sym_opt cont sk ->
      Exception.return $ Stack_cons sym_opt (cont_elem :: cont) sk
  | Stack_cons2 _ _ _ ->
      error "append_to_current_continuation ==> Stack_cons2"
end





(* The state of a Core thread is a pair of the expressions being executed and
   a stack of continuation. Each element of the stack corresponds a Core
   procedure call  *)
type thread_state = <|
  arena:  expr core_run_annotation;
  stack:  stack core_run_annotation;
  errno:  Mem.pointer_value;
  env: list (map Symbol.sym value); (* Scoped environment for the Core symbols *)
  
  (* NON-SEMANTIC stuff *)
  current_proc_opt: maybe Symbol.sym;
  exec_loc: exec_location;
  current_loc: Loc.t;
|>


type io_state = <|
  stdout: Dlist.dlist string;
  stderr: Dlist.dlist string;
|>

type core_state = <|
  (* the [maybe thread_id] is that of the parent thread if any *)
  thread_states: list (Mem_common.thread_id *
                       (maybe Mem_common.thread_id * thread_state));
  io: io_state;
|>


(* State of Core evaluator *)
type core_run_state = <|
  tid_supply:      Mem_common.thread_id;
  aid_supply:      Cmm_csem.aid;
  excluded_supply: nat;
  
  (* Pre-calculated map of labeled continuations (aka. save()).
     the map is over procedure symbols (NOTE: read-only) *)
  labeled: map Symbol.sym (labeled_continuations core_run_annotation);
|>

(* Monad of the core evaluator (State + Exception + Undefined) *)
type core_runM 'a =
  State_exception_undefined.stExceptUndefM 'a core_run_state core_run_cause


let push_exec_loc sym loc = function
  | ELoc_globals ->
      ELoc_normal [(sym, loc)]
  | ELoc_normal xs ->
      ELoc_normal ((sym, loc) :: xs)
end

val initial_io_state: io_state
val initial_core_state: core_state
val initial_core_run_state: map Symbol.sym (labeled_continuations core_run_annotation) -> core_run_state

let initial_io_state = <|
  stdout= Dlist.nil;
  stderr= Dlist.nil;
|>

let initial_core_state = <|
  thread_states= [];
  io= initial_io_state;
|>

let initial_core_run_state xs = <|
  tid_supply=      0;
  aid_supply=      0;
  excluded_supply= 0;
  
  (*env=     [Map.empty];*)
  labeled= xs;
|>


let empty_annotation = <|
  sb_before  = {};
  dd_before  = {};
  asw_before = {};
|>

instance (Default core_run_annotation)
  let default = empty_annotation
end


val has_sbBefore_on_thread: Mem_common.thread_id -> core_run_annotation -> bool
let has_sbBefore_on_thread tid annot =
  Set.any (fun (tid', _) ->
    tid = tid'
  ) annot.sb_before



(* TODO: the following comment is probably out of date *)
(* TODO: here I'm annotating all actions instead (this may reduce the number of
         epsilon transitions) *)
(* [annotate b e] add on each sb-minimal action of [e] an annotation meaning
                  that this action is sequenced-after [act]
  
  in the rules comments, this function is noted: <b> e
 *)
(* val     annotate_expr: forall 'a. SetType 'a => polarity * 'a -> expr 'a -> expr 'a *)


val     add_to_sb: set (polarity * (Mem_common.thread_id * Cmm_csem.aid)) -> Core.expr core_run_annotation -> Core.expr core_run_annotation
let rec add_to_sb p_aids (Expr annot expr_ as expr) =
  if Global.using_concurrency () then
    Expr annot match expr_ with
      | Epure _ ->
          (* no change *)
          expr_
      | Ememop _ _ ->
          (* no change *)
          expr_
      | Eaction (Paction p' (Action loc annots a)) ->
          Eaction (Paction p' (Action loc <| annots with sb_before= (Set.map snd p_aids) union annots.sb_before |> a))
      | Ecase pe pat_es ->
          Ecase pe (List.map (fun (pat, e) -> (pat, add_to_sb p_aids e)) pat_es)
      | Elet a pe1 e2 ->
          Elet a pe1 (add_to_sb p_aids e2)
      | Eif pe1 e2 e3 ->
          Eif pe1 (add_to_sb p_aids e2) (add_to_sb p_aids e3)
      | Eccall annots ty pe pes ->
          Eccall <| annots with sb_before= (Set.map snd p_aids) union annots.sb_before |> ty pe pes
      | Eproc annots nm pes ->
          Eproc <| annots with sb_before= (Set.map snd p_aids) union annots.sb_before |> nm pes
      | Eunseq es ->
          Eunseq (List.map (add_to_sb p_aids) es)
      | Ewseq _as e1 e2 ->
          let is_positive = function
            | (Pos, _) -> true
            | _        -> false
          end in
          Ewseq _as (add_to_sb p_aids e1) (add_to_sb (Set.filter is_positive p_aids) e2)
      | Esseq _as e1 e2 ->
          Esseq _as (add_to_sb p_aids e1) (add_to_sb p_aids e2)
      | Ebound _ ->
          error "Core_run_aux.add_to_sb, Ebound"
      | End es ->
          End (List.map (add_to_sb p_aids) es)
      | Esave sym_bTy xs e ->
          Esave sym_bTy xs (add_to_sb p_aids e)
      | Erun annots sym pes ->
          Erun <| annots with sb_before= (Set.map snd p_aids) union annots.sb_before |> sym pes
      | Epar es ->
          Epar (List.map (add_to_sb p_aids) es)
      | Ewait _ ->
          (* no change *)
          expr_
      | Eannot _ _ ->
          error "Core_run_aux.add_to_sb, Eannot"
      | Eexcluded _ _ ->
          error "Core_run_aux.add_to_sb, Eexcluded"
    end
  else
    expr


val add_to_sb_stack: set (polarity * (Mem_common.thread_id * Cmm_csem.aid)) -> stack core_run_annotation -> stack core_run_annotation

let rec add_to_sb_continuation p_aids = function
  | [] ->
      []
  | Kunseq annots es1 es2 :: cont ->
      Kunseq annots es1 es2 :: add_to_sb_continuation p_aids cont
  | Kwseq annots _as e2 :: cont ->
      let is_positive = function
        | (Pos, _) -> true
        | _        -> false
      end in
      Kwseq annots _as(add_to_sb (Set.filter is_positive p_aids) e2) :: add_to_sb_continuation p_aids cont
  | Ksseq annots _as e2 :: cont ->
      Ksseq annots _as (add_to_sb p_aids e2) :: add_to_sb_continuation p_aids cont
end
let rec add_to_sb_stack p_aids sk =
  if Global.using_concurrency () then
    match sk with
      | Stack_empty ->
          Stack_empty
      | Stack_cons proc_opt cont sk ->
          let () = Debug.warn [] (fun () -> "(UNSURE) Core_run_aux.add_to_sb_stack ==> is not touching lconts") in
          Stack_cons proc_opt (add_to_sb_continuation p_aids cont) (add_to_sb_stack p_aids sk)
      | Stack_cons2 _ _ _ ->
          error "add_to_sb_stack ==> Stack_cons2"
   end
  else
    sk




val     add_to_asw: set Cmm_csem.aid -> Core.expr core_run_annotation -> Core.expr core_run_annotation
let rec add_to_asw aids (Expr annot expr_ as expr) =
  if Global.using_concurrency () then
    let () = Debug.print_debug 5 [Debug.DB_driver; Debug.DB_concurrency] (fun () -> "HELLO add_to_asw ====") in
    Expr annot match expr_ with
      | Epure _ ->
          (* no change *)
          expr_
      | Ememop _ _ ->
          (* no change *)
          expr_
      | Eaction (Paction p' (Action loc annots a)) ->
         let _ = Set.map (fun aid ->
           Debug.print_debug 5 [Debug.DB_driver; Debug.DB_concurrency] (fun () -> "ADD_TO_ASW ==> " ^ show aid)
          ) aids in
          Eaction (Paction p' (Action loc <| annots with asw_before= aids union annots.asw_before |> a))
      | Ecase pe pat_es ->
          Ecase pe (List.map (fun (pat, e) -> (pat, add_to_asw aids e)) pat_es)
      | Elet a pe1 e2 ->
          Elet a pe1 (add_to_asw aids e2)
      | Eif pe1 e2 e3 ->
          Eif pe1 (add_to_asw aids e2) (add_to_asw aids e3)
      | Eccall annots ty pe pes ->
          Eccall <| annots with asw_before= aids union annots.asw_before |> ty pe pes
      | Eproc annots nm pes ->
          Eproc <| annots with asw_before= aids union annots.asw_before |> nm pes
      | Eunseq es ->
          Eunseq (List.map (add_to_asw aids) es)
      | Ewseq _as e1 e2 ->
          Ewseq _as (add_to_asw aids e1) (add_to_asw aids e2) (* TODO this is wrong *)
      | Esseq _as e1 e2 ->
          Esseq _as (add_to_asw aids e1) (add_to_asw aids e2) (* TODO this is wrong *)
      | Ebound _ ->
          error "Core_run_aux.add_to_asw, Ebound"
      | Esave sym_bTy xs e ->
          Esave sym_bTy xs (add_to_asw aids e)
      | Erun annots sym pes ->
          Erun <| annots with asw_before= aids union annots.asw_before |> sym pes
      | End es ->
          End (List.map (add_to_asw aids) es)
      | Epar es ->
          Epar (List.map (add_to_asw aids) es)
      | Ewait _ ->
          (* no change *)
          expr_
      | Eannot _ _ ->
          error "Core_run_aux.add_to_asw, Eannot"
      | Eexcluded _ _ ->
          error "Core_run_aux.add_to_asw, Eexcluded"
    end
  else
    expr

val add_to_asw_stack: set Cmm_csem.aid -> stack core_run_annotation -> stack core_run_annotation

let rec add_to_asw_continuation aids = function
  | [] ->
      []
  | Kunseq annots es1 es2 :: cont ->
      Kunseq annots (List.map (add_to_asw aids) es1) (List.map (add_to_asw aids) es2) :: add_to_asw_continuation aids cont
  | Kwseq annots _as e2 :: cont ->
      Kwseq annots _as (add_to_asw aids e2) :: add_to_asw_continuation aids cont
  | Ksseq annots _as e2 :: cont ->
      Ksseq annots _as (add_to_asw aids e2) :: add_to_asw_continuation aids cont
end
let rec add_to_asw_stack aids sk =
  let () = Debug.print_debug 5 [Debug.DB_driver; Debug.DB_concurrency] (fun () -> "BOOM add_to_asw_stack ==> "(* ^ Pp.stringFromCore_stack sk*)) in
  if Global.using_concurrency () then
    match sk with
      | Stack_empty ->
          Stack_empty
      | Stack_cons proc_opt cont sk ->
          Stack_cons proc_opt (add_to_asw_continuation aids cont) (add_to_asw_stack aids sk)
      | Stack_cons2 _ _ _ ->
          error "add_to_asw_stack ==> Stack_cons2"
    end
  else
    sk















val     comma_list: forall 'a. ('a -> string) -> list 'a -> string
let rec comma_list f = function
  | [] ->
      ""
  | x::xs ->
      f x ^ ", " ^ comma_list f xs
end
 





(* BEGIN silly *)
(* Dummy function doing nothing, but required to typecheck *)

val convert_pexpr: forall 'bty. generic_pexpr 'bty Symbol.sym -> pexpr
let rec convert_pexpr (Pexpr annot _ pexpr_) =
  Pexpr annot () match pexpr_ with
  | PEsym sym ->
      PEsym sym
 | PEimpl iCst ->
     PEimpl iCst
 | PEval cval ->
     PEval cval
 | PEconstrained xs ->
     PEconstrained (List.map (fun (constrs, pe) -> (constrs, convert_pexpr pe)) xs)
 | PEundef loc ub ->
     PEundef loc ub
 | PEerror str pe ->
     PEerror str (convert_pexpr pe)
 | PEctor ctor pes ->
     PEctor ctor (List.map convert_pexpr pes)
 | PEcase pe pat_pes ->
     PEcase (convert_pexpr pe) (List.map (fun (pat, pe) -> (pat, convert_pexpr pe)) pat_pes)
 | PEarray_shift pe1 ty pe2 ->
     PEarray_shift (convert_pexpr pe1) ty (convert_pexpr pe2)
 | PEmember_shift pe sym ident ->
     PEmember_shift (convert_pexpr pe) sym ident
 | PEmemop mop pes ->
    PEmemop mop (List.map convert_pexpr pes)
 | PEnot pe ->
     PEnot (convert_pexpr pe)
 | PEop bop pe1 pe2 ->
     PEop bop (convert_pexpr pe1) (convert_pexpr pe2)
 | PEconv_int ity pe ->
    PEconv_int ity (convert_pexpr pe)
 | PEwrapI ity iop pe1 pe2 ->
    PEwrapI ity iop (convert_pexpr pe1) (convert_pexpr pe2)
 | PEcatch_exceptional_condition ity iop pe1 pe2 ->
    PEcatch_exceptional_condition ity iop (convert_pexpr pe1) (convert_pexpr pe2)
 | PEstruct sym ident_pes ->
     PEstruct sym (List.map (fun (ident, pe) -> (ident, convert_pexpr pe)) ident_pes)
 | PEunion sym ident pe ->
     PEunion sym ident (convert_pexpr pe)
 | PEcfunction pe ->
     PEcfunction (convert_pexpr pe)
 | PEmemberof tag_sym memb_ident pe ->
     PEmemberof tag_sym memb_ident (convert_pexpr pe)
 | PEcall nm pes ->
     PEcall nm (List.map convert_pexpr pes)
 | PElet pat pe1 pe2 ->
     PElet pat (convert_pexpr pe1) (convert_pexpr pe2)
 | PEif pe1 pe2 pe3 ->
     PEif (convert_pexpr pe1) (convert_pexpr pe2) (convert_pexpr pe3)
 | PEis_scalar pe ->
     PEis_scalar (convert_pexpr pe)
 | PEis_integer pe ->
     PEis_integer (convert_pexpr pe)
 | PEis_signed pe ->
     PEis_signed (convert_pexpr pe)
 | PEis_unsigned pe ->
     PEis_unsigned (convert_pexpr pe)
 | PEbmc_assume pe ->
     PEbmc_assume (convert_pexpr pe)
 | PEare_compatible pe1 pe2 ->
     PEare_compatible (convert_pexpr pe1) (convert_pexpr pe2)
  end

val     convert_expr: forall 'bty 'a. Core.generic_expr 'a 'bty Symbol.sym -> Core.expr core_run_annotation
let rec convert_expr (Expr annot expr_) =
  Expr annot match expr_ with
    | Epure pe ->
        Epure (convert_pexpr pe)
    | Ememop memop pes ->
        Ememop memop (List.map convert_pexpr pes)
    | Elet pat pe1 e2 ->
        Elet pat (convert_pexpr pe1) (convert_expr e2)
    | Eif pe1 e2 e3 ->
        Eif (convert_pexpr pe1) (convert_expr e2) (convert_expr e3)
    | Ecase pe pat_es ->
        Ecase (convert_pexpr pe) (List.map (fun (pat, e) -> (pat, convert_expr e)) pat_es)
    | Eccall _ ty pe pes ->
        Eccall empty_annotation (convert_pexpr ty) (convert_pexpr pe) (List.map convert_pexpr pes)
    | Eproc _ nm pes ->
        Eproc empty_annotation nm (List.map convert_pexpr pes)
    | Eaction pact ->
        Eaction (convert_paction pact)
    | Eunseq es ->
        Eunseq (List.map convert_expr es)
    | Ewseq pat e1 e2 ->
        Ewseq pat (convert_expr e1) (convert_expr e2)
    | Esseq pat e1 e2 ->
        Esseq pat (convert_expr e1) (convert_expr e2)
    | Ebound e ->
        Ebound (convert_expr e)
    | Esave sym xs e ->
        Esave sym (List.map (fun (sym, (bTy, pe)) -> (sym, (bTy, convert_pexpr pe))) xs) (convert_expr e)
    | Erun _ sym pes ->
        Erun empty_annotation sym (List.map convert_pexpr pes)
    | End es ->
        End (List.map convert_expr es)
    | Epar es ->
        Epar (List.map convert_expr es)
    | Ewait tid ->
        Ewait tid
    | Eannot fps e ->
        Eannot fps (convert_expr e)
    | Eexcluded n act ->
        Eexcluded n (convert_action act)
(*
    | Eloc loc e ->
        Eloc loc (convert_expr e)
    | Estd s e ->
        Estd s (convert_expr e)
*)
  end

and convert_action_ act_ =
  match act_ with
    | Create pe1 pe2 pref ->
        Create (convert_pexpr pe1) (convert_pexpr pe2) pref
    | CreateReadOnly pe1 pe2 pe3 pref ->
        CreateReadOnly (convert_pexpr pe1) (convert_pexpr pe2) (convert_pexpr pe3) pref
    | Alloc pe1 pe2 pref ->
        Alloc (convert_pexpr pe1) (convert_pexpr pe2) pref
    | Kill kind pe ->
        Kill kind (convert_pexpr pe)
    | Store b pe1 pe2 pe3 mo ->
        Store b (convert_pexpr pe1) (convert_pexpr pe2) (convert_pexpr pe3) mo
    | SeqRMW b pe1 pe2 sym pe3 ->
        SeqRMW b (convert_pexpr pe1) (convert_pexpr pe2) sym (convert_pexpr pe3)
    | Load pe1 pe2 mo ->
        Load (convert_pexpr pe1) (convert_pexpr pe2) mo
    | RMW pe1 pe2 pe3 pe4 mo1 mo2 ->
        RMW (convert_pexpr pe1) (convert_pexpr pe2) (convert_pexpr pe3) (convert_pexpr pe4) mo1 mo2
    | Fence mo ->
        Fence mo
    | CompareExchangeStrong pe1 pe2 pe3 pe4 mo1 mo2 ->
        CompareExchangeStrong (convert_pexpr pe1) (convert_pexpr pe2) (convert_pexpr pe3) (convert_pexpr pe4) mo1 mo2
    | CompareExchangeWeak pe1 pe2 pe3 pe4 mo1 mo2 ->
        CompareExchangeWeak (convert_pexpr pe1) (convert_pexpr pe2) (convert_pexpr pe3) (convert_pexpr pe4) mo1 mo2
    | LinuxFence mo ->
        LinuxFence mo
    | LinuxStore pe1 pe2 pe3 mo ->
        LinuxStore (convert_pexpr pe1) (convert_pexpr pe2) (convert_pexpr pe3) mo
    | LinuxLoad pe1 pe2 mo ->
        LinuxLoad (convert_pexpr pe1) (convert_pexpr pe2) mo
    | LinuxRMW pe1 pe2 pe3 mo ->
        LinuxRMW (convert_pexpr pe1) (convert_pexpr pe2) (convert_pexpr pe3) mo

  end

and convert_action act =
  match act with
    | Action loc _ act_ ->
        Action loc empty_annotation (convert_action_ act_)
  end

and convert_paction pact =
  match pact with
    | Paction p act ->
        Paction p (convert_action act)
  end

let convert_impl_decl = function
  | Def bTy pe ->
      Def bTy (convert_pexpr pe)
  | IFun bTy sym_bTys pe ->
      IFun bTy sym_bTys (convert_pexpr pe)
end

let convert_globs (name, glb) =
  (name, match glb with
  | GlobalDef bTy e ->
      GlobalDef bTy (convert_expr e)
  | GlobalDecl bTy ->
      GlobalDecl bTy
  end)

val convert_file: forall 'bty 'a. generic_file 'bty 'a -> file core_run_annotation
let convert_file file =
  let convert_fun_map_decl = function
    | Fun bTy params pe ->
        Fun bTy params (convert_pexpr pe)
    | ProcDecl loc bTy params ->
        ProcDecl loc bTy params
    | BuiltinDecl loc bTy params ->
        BuiltinDecl loc bTy params
    | Proc loc mrk bTy params e ->
        Proc loc mrk bTy params (convert_expr e)
  end in

 <|
  main=    file.main;
  calling_convention= file.calling_convention;
  tagDefs= file.tagDefs;
  stdlib=  Map.map convert_fun_map_decl file.stdlib;
  impl=    Map.map convert_impl_decl file.impl;
  globs=   List.map convert_globs file.globs;
  funs=    Map.map convert_fun_map_decl file.funs;
  extern=  file.extern;
  funinfo= file.funinfo;
  loop_attributes= file.loop_attributes;
  visible_objects_env= file.visible_objects_env;
 |>
(* END silly *)
