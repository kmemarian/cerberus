open import Pervasives
import State State_exception Exception_undefined Undefined


type stExceptUndefM 'a 'bs 'msg = State_exception.stExceptM (Undefined.t 'a) 'bs 'msg

val return: forall 'a 'b 's 'msg. 'a -> stExceptUndefM 'a 's 'msg
let stExceptUndef_return z =
  State_exception.return (Undefined.return z)
let inline return = stExceptUndef_return

val bind: forall 'a 'b 's 'msg. stExceptUndefM 'a 's 'msg         ->
                                ('a -> stExceptUndefM 'b 's 'msg) ->
                                stExceptUndefM 'b 's 'msg
let stExceptUndef_bind m f = fun st ->
  match m st with
    | Exception.Result (Undefined.Defined z, st') ->
        f z st'
    | Exception.Result (Undefined.Undef loc ubs, st') ->
        State_exception.return (Undefined.undef loc ubs) st'
    | Exception.Result (Undefined.Error loc str, st') ->
        State_exception.return (Undefined.error loc str) st'
    | Exception.Exception err ->
        State_exception.fail err st
  end
let inline bind = stExceptUndef_bind

val  mapM: forall 'a 'b 's 'msg. ('a -> stExceptUndefM 'b 's 'msg) ->
                                  list 'a              ->
                                  stExceptUndefM (list 'b) 's 'msg
let stExceptUndef_mapM f xs =
  State_exception.bind (State_exception.mapM f xs)
    (fun us -> State_exception.return $ Undefined.mapM id us)
let inline mapM = stExceptUndef_mapM


val runEU: forall 'a 's 'msg. Exception_undefined.t 'a 'msg -> stExceptUndefM 'a 's 'msg
let runEU m = fun st ->
  match m with
    | Exception.Result (Undefined.Defined z) ->
        Exception.Result (Undefined.Defined z, st)
    | Exception.Result (Undefined.Undef loc ubs) ->
        Exception.Result (Undefined.Undef loc ubs, st)
    | Exception.Result (Undefined.Error loc str) ->
        Exception.Result (Undefined.Error loc str, st)
    | Exception.Exception err ->
        Exception.Exception err
  end


val runE: forall 'a 's 'msg. Exception.exceptM 'a 'msg -> stExceptUndefM 'a 's 'msg
let runE m =
  runEU (Exception.bind m Exception_undefined.return)



val runS: forall 'a 's 'msg. State.stateM 'a 's -> stExceptUndefM 'a 's 'msg
let runS m = fun st ->
  let (a, st') = m st in
  Exception.return (Undefined.return a, st')

val runSE: forall 'a 's 'msg. State_exception.stExceptM 'a 's 'msg -> stExceptUndefM 'a 's 'msg
let runSE m =
  State_exception.bind m
    (fun z -> State_exception.return (Undefined.return z))


val run: forall 'a 's 'msg. stExceptUndefM 'a 's 'msg -> 's -> Exception.exceptM (Undefined.t 'a * 's) 'msg
let stExceptUndef_run m st = m st
let inline run = stExceptUndef_run


(* NOTE: this is foldl *)
val     foldM: forall 'a 'b 's 'msg. ('a -> 'b -> stExceptUndefM 'a 's 'msg) -> 'a -> list 'b -> stExceptUndefM 'a 's 'msg
let rec stExceptUndef_foldM f a = function
  | [] ->
      return a
  | x::xs ->
      bind (f a x) (fun z -> stExceptUndef_foldM f z xs)
end
let inline foldM = stExceptUndef_foldM

val     filterM: forall 'a 's 'msg. ('a -> stExceptUndefM bool 's 'msg) -> list 'a -> stExceptUndefM (list 'a) 's 'msg
let rec filterM pred = function
  | [] ->
      return []
  | (x::xs) ->
      bind (pred x)          (fun b  ->
      bind (filterM pred xs) (fun ys ->
      return (if b then x::ys else ys)
      ))
end


val        sequence: forall 'a 's 'msg. list (stExceptUndefM  'a 's 'msg) -> stExceptUndefM (list 'a) 's 'msg
let inline sequence ms =
  let k m m' =
    bind m (fun x ->
      bind m' (fun xs ->
        return (x::xs)
      )
    ) in
  List.foldr k (return []) ms

val replicateM: forall 'a 's 'msg. nat -> (stExceptUndefM 'a 's 'msg) -> stExceptUndefM (list 'a) 's 'msg
let replicateM n x =
  sequence (List.replicate n x)


val stExceptUndef_fail: forall 'a 's 'msg. 'msg -> stExceptUndefM 'a 's 'msg
let stExceptUndef_fail err =
  runE (Exception.fail err)
let inline fail = stExceptUndef_fail



val fmap: forall 'a 'b 's 'msg. ('a -> 'b) -> stExceptUndefM 'a 's 'msg -> stExceptUndefM 'b 's 'msg
let stExceptUndef_fmap f m =
  bind m (fun z -> return (f z))
let inline fmap = stExceptUndef_fmap


val        update: forall 's 'msg. ('s -> 's) -> stExceptUndefM unit 's 'msg
let inline update f =
  runSE (State_exception.update f)

val        read: forall 'a 's 'msg. ('s -> 'a) -> stExceptUndefM 'a 's 'msg
let inline read f =
  runSE (State_exception.read f)

val stExceptUndef_undef:
  forall 'a 's 'msg. Loc.t -> list Undefined.undefined_behaviour -> stExceptUndefM 'a 's 'msg
let stExceptUndef_undef loc ubs =
  State_exception.return (Undefined.undef loc ubs)
let inline undef loc ubs =
  stExceptUndef_undef loc ubs
